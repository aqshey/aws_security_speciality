Cloudformation:
    1. Infrastructure as code (IAC) service
    2. It allows you to define your AWS resources as code
    3. It allows you to create, update, and delete your AWS resources by using templates

creating a stack:
    1. create a template
    2. create a stack
    3. cloudformation provisions the stack

cloudformation stack policies:
    1. stack policies are JSON documents that define the update actions that can be performed on designated resources
    2. stack policies are attached to stacks
    3. stack policies are used to prevent accidental updates to stack resources
    4. stack policies are used to prevent updates to specific properties of stack resources
    5. when you set a stack policy, all update actions are denied by default
example of stack policies:
    1. allow all updates
    2. allow updates to specific properties
    3. allow updates to specific properties only when other properties are updated
    4. allow updates to specific properties only when other properties are not updated
    5. deny all updates

json
{
    "Statement" : [
        {
            "Effect" : "Allow",
            "Action" : "Update:*",
            "Principal" : "*",
            "Resource" : "*"
        }
    ]
}

{
    "Statement" : [
        {
            "Effect" : "Allow",
            "Action" : "Update:Modify",
            "Principal" : "*",
            "Resource" : "*"
        }
    ]
}

{
    "Statement" : [
        {
            "Effect" : "Allow",
            "Action" : "Update:Modify",
            "Principal" : "*",
            "Resource" : "*",
            "Condition" : {
                "StringEquals" : {
                    "ResourceTag/Environment" : "Production"
                }
            }
        }
    ]
}

{
    "Statement" : [
        {
            "Effect" : "Allow",
            "Action" : "Update:Modify",
            "Principal" : "*",
            "Resource" : "*",
            "Condition" : {
                "StringNotEquals" : {
                    "ResourceTag/Environment" : "Production"
                }
            }
        }
    ]
}

{
    "Statement" : [
        {
            "Effect" : "Deny",
            "Action" : "Update:*",
            "Principal" : "*",
            "Resource" : "*"
        }
    ]
}


Dynamic references:
1. you can refer the external values stored in ssm parameter store or secrets manager
2. you can refer the values of other resources in the same stack
3. you can refer the values of other resources in the other stacks


example:

{
    "Resources" : {
        "myInstance" : {
            "Type" : "AWS::EC2::Instance",
            "Properties" : {
                "ImageId" : "ami-0ff8a91507f77f867",
                "InstanceType" : "t2.micro",
                "KeyName" : "mykey",
                "SecurityGroups" : [ { "Ref" : "mySecurityGroup" } ],
                "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                    "#!/bin/bash -xe\n",
                    "yum install -y aws-cfn-bootstrap\n",
                    "/opt/aws/bin/cfn-signal -e $? --stack ", { "Ref" : "AWS::StackName" }, " --resource myInstance\n"
                ]]}}
            }
        },
        "mySecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Enable SSH access via port 22",
                "SecurityGroupIngress" : [ {
                    "IpProtocol" : "tcp",
                    "FromPort" : "22",
                    "ToPort" : "22",
                    "CidrIp" : { "Ref" : "VpcCidrBlock" }
                } ]
            }
        }
    }
}


